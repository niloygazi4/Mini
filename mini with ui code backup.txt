import ctypes
import datetime
import os
import random
import smtplib
import subprocess
import time
import webbrowser
import cv2
import instaloader
import psutil
import pyautogui
import pyjokes
import pyperclip
import pyttsx3
import sys
import pywhatkit as kit
import requests
import speech_recognition as sr
import wikipedia
import winshell
from PyQt5 import QtGui
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from bs4 import BeautifulSoup
from googletrans import Translator
from pywikihow import search_wikihow
from miniui2 import Ui_jarvisUi

emails = {
    "admin": "multi.man.ash0192@gmail.com"
}

hi = ["hai", "hi", "hey"]

city = "Dhaka"

engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
# print(voices[0].id)
engine.setProperty('voice', voices[0].id)


# text to speech
def speak(audio):
    engine.say(audio)
    engine.setProperty("rate", 170)
    print(audio)
    engine.runAndWait()


# To wish
def wish():
    hour = int(datetime.datetime.now().hour)
    tt = time.strftime("%I:%M %p")

    if hour >= 0 and hour <= 12:
        speak(f"good morning sir. Its {tt}")
    elif hour > 12 and hour < 18:
        speak(f"good afternoon sir. Its {tt}")
    else:
        speak(f"good evening sir. Its {tt}")
    speak("I am mini, your personal AI, please tell me how can I help you")


def cpu():
    usage = str(psutil.cpu_percent())
    speak("CPU is at" + usage + "Percentage")


# to send email
def sendEmail(to, content):
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.ehlo()
    server.starttls()
    server.login("assisttantBot6200@gmail.com", "xyz@1234")
    server.sendmail("assisttantBot6200@gmail.com", to, content)
    server.close()


def note(text):
    date = datetime.datetime.now()
    file_name = str(date).replace(":", "-") + "-note.txt"
    with open(file_name, "w") as f:
        f.write(text)
    subprocess.Popen(["notepad.exe", file_name])


def screenshot():
    pyautogui.keyDown("ctrl")
    pyautogui.keyDown("shift")
    pyautogui.press("i")
    pyautogui.keyUp("ctrl")
    pyautogui.keyUp("shift")


def news():
    main_url = 'http://newsapi.org/v2/top-headlines?sources-techcrunch&apiKey-35efe9b6abf0431aa39cfcf52006d3cd'

    main_page = requests.get(main_url).json()

    articles = main_page["articles"]

    head = []
    day = ["first", "second", "third", "forth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth"]
    for ar in articles:
        head.append(ar["title"])
    for i in range(len(day)):
        speak(f"today's {day[i]} news is: {head[i]}")


class MainThread(QThread):
    def __init__(self):
        super(MainThread, self).__init__()

    # To convert voice to text
    def takecommand(self):
        r = sr.Recognizer()
        with sr.Microphone() as source:
            print("listening...")
            r.pause_threshold = 1
            audio = r.listen(source, timeout=6000, phrase_time_limit=5)

        try:
            print("Recognizing...")
            query = r.recognize_google(audio, language='en-in')
            print(f"user said: {query}")

        except Exception as e:
            # speak("say that again please...")
            return "none"
        query = query.lower()
        return query

    def languagetranslator(self):
        try:
            trans = Translator()
            speak("Say the language to translate in")
            language = self.takecommand().replace(" ", "")
            speak("What to translate")
            content = self.takecommand()
            t = trans.translate(text=content, dest=language)
            speak(f"{t.origin} in {t.dest} is{t.text}")
        except:
            speak("Unable to translate")

    def convert(self):
        trans = Translator()
        speak("Say the language to translate in")
        language = self.takecommand().replace(" ", "")
        pyautogui.keyDown("ctrl")
        pyautogui.press("c")
        pyautogui.keyUp("ctrl")
        tobespoken = pyperclip.paste()
        content = tobespoken
        t = trans.translate(text=content, dest=language)
        speak(f"{t.origin} in {t.dest} is{t.text}")

    def Date(self):
        year = int(datetime.datetime.now().year)
        month = int(datetime.datetime.now().month)
        date = int(datetime.datetime.now().day)
        speak('the current date is')
        speak(date)
        speak(month)
        speak(year)

    def run(self):
        self.TaskExecution()
        # while True:
        #     self.query = self.takecommand
        #     if "wake up" in self.query or "are you there" in self.query or "hello" in self.query:
        #         self.TaskExecution()
        #
        #     elif "go to sleep" in self.query or "mini you can sleep now" in self.query:
        #         speak("Okay sir going to sleep, I will there just call me if you need")
        #         break

    def TaskExecution(self):
        wish()
        while True:

            self.query = self.takecommand()

            # logic building for tasks
            # -------------- open apps --------------------- #
            if "open Notepad" in self.query or "notepad" in self.query:
                speak("opening Notepad")
                os.system("Notepad")
                # npath = "C:\\Windows\\system32\\notepad.exe"
                # os.startfile(npath)

            elif "open CMD" in self.query:
                speak("Opening CMD")
                npath = "C:\\Windows\\system32\\cmd.exe"
                os.startfile(npath)

            elif "open Apex Legend" in self.query:
                speak("opening Apex Legend")
                npath = "F:\\Program Files (x86)\\Origin Games\\Apex\\r5apex.exe"
                os.startfile(npath)

            elif "open epic launcher" in self.query:
                speak("opening epic launcher")
                npath = "D:\\epic games\\Main Setup\\Epic Games\\Launcher\\Portal\\Binaries\\Win32\\EpicGamesLauncher.exe"
                os.startfile(npath)

            # elif "open mobile camera" in self.query or "open my mobile camera" in self.query:
            #     import urllib.request
            #     import numpy as np
            #     import time
            #
            #     url = "http://192.168.43.1:8080/shot.jpg"
            #
            #     while True:
            #         img_arr = np.array(bytearray(urllib.request.urlopen(url).read()), dtype=np.uint8)
            #         img = cv2.imdecode(img_arr, -1)
            #         cv2.imshow('IPWebcam', img)
            #         q = cv2.waitKey(1)
            #         if q == ord("q"):
            #             break

            elif "open camera" in self.query:
                cap = cv2.VideoCapture(0)

                # Check if the webcam is opened correctly
                if not cap.isOpened():
                    raise IOError("Cannot open camera")

                while True:
                    ret, frame = cap.read()
                    frame = cv2.resize(frame, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_AREA)
                    cv2.imshow('Camera', frame)

                    k = cv2.waitKey(50)
                    if k == 27:
                        break

                cap.release()
                cv2.destroyAllWindows()

            # -------------- normal --------------------- #

            elif "tell me a joke" in self.query:
                joke = pyjokes.get_joke()
                speak(joke)

            elif "Hi" in self.query or "hai" in self.query or "hey" in self.query:
                speak("hey there")

            elif "what can you do" in self.query:
                speak("I can do lots of things, like giving information about anything, telling my name, "
                      "giving musics, search in google, playing musics in youtube or from your devise and many more")

            elif "fuck" in self.query or "fuck me" in self.query or "sex with me" in self.query:
                speak("sorry! I don't have time to dash you. Maybe latter")

            elif "do you have girl friend" in self.query:
                speak("No but I am trying to make one")

            elif "do you want to be my boy friend" in self.query:
                speak("I can but at first i need permission from sir. Because humans are bad and I can not understand "
                      "humans like my sir can or you can")

            elif "what is the date" in self.query:
                from datetime import date
                today = date.today()
                speak(f"Today date is: {today}")

            elif "tell me the weather" in self.query:

                ipAdd = requests.get('https://api.ipify.org').text
                url = 'https://get.geojs.io/v1/ip/geo/' + ipAdd + '.json'
                geo_requests = requests.get(url)
                geo_data = geo_requests.json()
                # print(geo_data)
                city = geo_data['city']

                # Enter your API key here
                api_key = "8ff57dd697a4cee005959fc77b5730ee"

                # base_url variable to store url
                base_url = "http://api.openweathermap.org/data/2.5/weather?"

                # Give city name
                # speak("sir please tell the state name")
                # tell_city = self.takecommand
                city_name = city
                # city_name = input("Enter city name : ")

                # complete_url variable to store
                # complete url address
                complete_url = base_url + "appid=" + api_key + "&q=" + city_name

                # get method of requests module
                # return response object
                response = requests.get(complete_url)

                # json method of response object
                # convert json format data into
                # python format data
                x = response.json()

                # Now x contains list of nested dictionaries
                # Check the value of "cod" key is equal to
                # "404", means city is found otherwise,
                # city is not found
                if x["cod"] != "404":

                    # store the value of "main"
                    # key in variable y
                    y = x["main"]

                    # store the value corresponding
                    # to the "temp" key of y
                    current_temperature = y["temp"]

                    # store the value corresponding
                    # to the "pressure" key of y
                    current_pressure = y["pressure"]

                    # store the value corresponding
                    # to the "humidity" key of y
                    current_humidity = y["humidity"]

                    # store the value of "weather"
                    # key in variable z
                    z = x["weather"]

                    # store the value corresponding
                    # to the "description" key at
                    # the 0th index of z
                    weather_description = z[0]["description"]

                    # print following values
                    speak(" Temperature (in kelvin unit) = " +
                          str(current_temperature) +
                          "\n atmospheric pressure (in hPa unit) = " +
                          str(current_pressure) +
                          "\n humidity (in percentage) = " +
                          str(current_humidity) +
                          "\n description = " +
                          str(weather_description))

                else:
                    print(" City Not Found ")

            elif "where i am" in self.query or "where we are" in self.query:
                speak("wait sir, let me check")
                try:
                    ipAdd = requests.get('https://api.ipify.org').text
                    # print(ipAdd)
                    url = 'https://get.geojs.io/v1/ip/geo/' + ipAdd + '.json'
                    geo_requests = requests.get(url)
                    geo_data = geo_requests.json()
                    # print(geo_data)
                    city = geo_data['city']
                    # state = geo_data['state']
                    country = geo_data['country']
                    speak(f"sir we are in {city} city of {country} country")
                except Exception as e:
                    speak("sorry sir, Due to network issue i am not able to find where we are.")
                    pass

            elif 'make a note' in self.query or 'write down' in self.query:
                speak("What would you like me to note down?")
                note_text = self.takecommand
                note(note_text)
                speak("I've made a note of that. Anything else?")
                self.query = self.takecommand
                if "no" in self.query:
                    speak('ok sir')
                if "yes" in self.query:
                    speak('Go on sir')

            elif "what is the temperature of dhaka" in self.query:
                search = "temperature in Dhaka"
                url = f"https://www.google.com/search?q={search}"
                r = requests.get(url)
                data = BeautifulSoup(r.text, "html.parser")
                temp = data.find("div", class_="BNeawe").text
                speak(f"current {search} is {temp}")

            elif "hello" in self.query or "hey" in self.query:
                speak("hello sir, may i help you with something.")

            elif "what is the time" in self.query:
                tt = time.strftime("%I:%M %p")
                speak(f"sir the time is {tt}")

            elif "tell me about your owner" in self.query:
                speak("My owner's name is Niloy gazi")
                speak("Niloy Gazi is dumb, but in coding he is great, his dream is to go to Canada and do a job as a "
                      "software engineer. He is something else. I can't tell more about sir because I need permission for "
                      "that from sir. sorry!")

            elif "thank you" in self.query or "thanks" in self.query:
                speak("it's my pleasure sir.")

            elif "what is your code made of" in self.query or "your code" in self.query:
                speak("My code is made up of python. My coding is done by Niloy Gazi founder of IADT.")

            elif 'how are you' in self.query or 'how are you doing' in self.query:

                speak("I am fine sir, what about you?")

                self.query = self.takecommand

                if 'am also good' in self.query or 'am also fine' in self.query or 'healthy' in self.query or 'fine' in self.query:
                    speak("wow")

                if 'not fine' in self.query or 'not well' in self.query or 'not good' in self.query or 'felling low' in self.query or 'not in mood' in self.query:

                    speak("sad to hear that sir, how may I change your mood, May i play music for You?")

                    self.query = self.takecommand

                    if 'ok' in self.query or 'sure' in self.query or 'hmm' in self.query or 'alright' in self.query or 'yeah' in self.query or 'play music' in self.query:

                        speak('ok sir playing music for you')
                        music_dir = "D:\\music\\musics"
                        songs = os.listdir(music_dir)
                        rd = random.choice(songs)
                        os.startfile(os.path.join(music_dir, rd))
                        print(songs)

                        for songs in songs:

                            if songs.endswith('.mp3'):
                                os.startfile(os.path.join(music_dir, songs))

                    elif "no" in self.query or "it's ok" in self.query or "don't play" in self.query or 'nope' in self.query:

                        speak("Ok sir as You like!")

            elif "play music" in self.query:
                music_dir = "D:\\music\\musics"
                songs = os.listdir(music_dir)
                rd = random.choice(songs)
                os.startfile(os.path.join(music_dir, rd))

            elif "play baby song" in self.query:
                music_dir = "D:\\music\\baby fun"
                songs = os.listdir(music_dir)
                rd = random.choice(songs)
                os.startfile(os.path.join(music_dir, rd))

            elif "play birthday music" in self.query or "play birthday song" in self.query or "birthday song" in self.query:
                music_dir = "D:\\music\\birthday"
                songs = os.listdir(music_dir)
                rd = random.choice(songs)
                os.startfile(os.path.join(music_dir, rd))

            elif "stop the music" in self.query:
                speak("okay sir stopping music")
                os.system("taskkill /f /im  Groove Music.exe")

            elif "play song" in self.query:
                music_dir = "D:\\music\\songs"
                songs = os.listdir(music_dir)
                rd = random.choice(songs)
                os.startfile(os.path.join(music_dir, rd))

            elif 'translate' in self.query:
                self.languagetranslator()

            elif 'convert selected' in self.query:
                self.convert()

            elif 'date' in self.query:
                self.Date()

            # -------------- online watcher --------------------- #
            elif "Mini check the internet speed" in self.query or "check the internet speed" in self.query:

                try:
                    speak(os.system('cmd /k "speedtest"'))

                except:
                    speak("there is no internet connection")
            elif "tell my ip address" in self.query or "ip address" in self.query:
                speak("I don't have permission to tell the ip address")
                # ip = get('https://api.ipify.org').text
                # speak(f"your IP address is {ip}")
            elif "wikipedia" in self.query:
                speak("searching wikipedia...")
                self.query = self.query.replace("wikipedia", "")
                results = wikipedia.summary(self.query, sentences=2)
                speak("According to wikipedia")
                speak(results)

            # -------------- close apps --------------------- #
            elif "close notepad" in self.query:
                speak("okay sir closing notepad")
                os.system("taskkill /im notepad.exe")

            elif "close chrome" in self.query:
                speak("okay sir closing google chrome")
                os.system("taskkill /im chrome.exe")

            # -------------- to check a instagram profile --------------------- #

            elif "instagram profile" in self.query or "profile on instagram" in self.query:

                speak("sir please enter the user name correctly.")
                name = input("Enter username here:")
                webbrowser.open(f"www.instagram.com/{name}")
                speak(f"Sir here is the profile of the user {name}")
                time.sleep(5)
                speak("sir would you like to download profile picture of this account.")
                condition = self.takecommand.lower()
                if "yes" in condition:
                    mod = instaloader.Instaloader()  # pip install instadownloader
                    mod.download_profile(name, profile_pic_only=True),
                    speak(
                        "i am done sir, profile picture is saved in our main folder. now i am ready for the next command")
                else:
                    pass

            # -------------- Send Messages or files --------------------- #
            elif 'email' in self.query:
                try:
                    speak("Whom U would like to send email")
                    name = self.takecommand
                    to = emails[name]
                    speak("What should i say?")
                    content = self.takecommand
                    speak("Confirm, yes or no")
                    mailconfig = self.takecommand
                    flag = 0
                    while flag != 1:
                        if "yes" in mailconfig:
                            sendEmail(to, content)
                            speak("Email has been sent succesfully")
                            flag = 1
                        elif "no" in mailconfig:
                            speak("Ok sir request has been cancelled")
                            break
                        else:
                            speak("Unable to confirm, please say again")
                            break
                except Exception as e:
                    speak("Could not send email")

            elif "send message" in self.query or "sent message" in self.query:  # hour, min
                kit.sendwhatmsg("+8801313898703", "this is a test", 10, 59)

            # -------------- folder --------------------- #
            elif "hide all files" in self.query or "hide this folder" in self.query or "visible for everyone" in self.query:
                speak("sir please tell me you want to hide this folder or make it visible for everyone")
                condition = self.takecommand

                if "hide" in condition:
                    os.system("attrib +h /s /d")  # os module
                    speak("sir, all the files in this folder are now hidden.")
                elif "visible" in condition:
                    os.system("attrib -h /s /d")
                    speak("sir, all the files in this folder are now visible to everyone. i wish you are taking this "
                          "decision in your own peace.")

                elif "leave it" in condition or "leave for now" in condition:
                    speak("Ok sir")

            # -------------- Windows / PC --------------------- #
            elif "switch the window" in self.query:
                pyautogui.keyDown("alt")
                pyautogui.press("tab")
                time.sleep(1)
                pyautogui.keyUp("alt")

            elif 'cpu usage' in self.query or 'cpu uses' in self.query or 'check my cpu' in self.query:
                cpu()

            elif 'lock window' in self.query or 'lock the system' in self.query:
                try:
                    speak("locking the device")
                    ctypes.windll.user32.LockWorkStation()
                except Exception as e:
                    speak("Sir windows is already locked")

            # elif 'set alarm' in self.query:
            #     speak("sir please tell me the time to set alarm. for example, set alarm to 5:30 a.m.")
            #     tt = self.takecommand  # set alarm to 5:30 a.m.
            #     tt = tt.replace("set alarm to ", "")  # 5:30 a.m.
            #     tt = tt.replace(".", "")  # 5:30 am
            #     tt = tt.upper()  # 5:30 AM
            #     import MyAlarm
            #     MyAlarm.alarm(tt)

            # to set an alarm
            # elif "set alarm" in self.query:
            #     nn = int(datetime.datetime.now().hour)
            #     if nn == 22:
            #         music_dir = "D:\\muisic\\Download Songs"
            #         songs = os.listdir(music_dir)
            #         rd = random.choice(songs)
            #         os.startfile(os.path.join(music_dir, rd))
            #         while True:
            #             if nn:
            #                 speak("sir you need to wake up now")
            #             elif "stop i am wake" in self.query or "okay" in self.query:
            #                 speak("okay sir")
            #                 speak("okay sir closing music")
            #                 os.system("taskkill /f /im Groove Music.exe")
            #
            # -----------------To find my location using IP Address

            elif 'empty recycle bin' in self.query or 'clean recycle bin' in self.query:
                try:
                    winshell.recycle_bin().empty(confirm=False, show_progress=False, sound=True)
                    speak("Recycle Bin is cleaned")
                except Exception as e:
                    speak("Recycle bin is already cleaned")

            elif "shut down the system" in self.query:
                os.system("shutdown/s /t 5")

            elif "battery percentage" in self.query or "how mush charge left" in self.query:
                import psutil
                battery = psutil.sensors_battery()
                percentage = battery.percent
                if percentage >= 75:
                    speak(f"sir your laptop have {percentage}% battery")
                    speak("you have enough power to continue your work")

                elif percentage >= 40 and percentage <= 75:
                    speak(f"sir your laptop have {percentage}% battery")
                    speak("it will be better if you connect the charging port")

                elif percentage >= 20 and percentage <= 40:
                    speak(f"sir your laptop have {percentage}% battery")
                    speak("you should connect with charging port")

                elif percentage >= 10 and percentage <= 20:
                    speak(f"sir your laptop have {percentage}% battery")
                    speak("sir its a last warning connect with charging port")

            elif "restart the system" in self.query:
                os.system("shutdown /r /t 5")

            elif "take screenshot" in self.query or "take a screenshot" in self.query:
                speak("please sir hold the screen for few seconds, i am taking sreenshot")
                time.sleep(1)
                img = pyautogui.screenshot()
                speak("sir, please tell me the name for this screenshot file")
                name = self.takecommand
                img.save(f"{name}.png")
                speak("i am done sir, the screenshot is saved in our main folder. now i am ready for the next command")

            # --------------------- To Hide files and folder ---------------

            elif "sleep the system" in self.query:
                os.system("rund1132.exe powrprof.dll, SetSuspendState 0,1,0")

            elif "volume up" in self.query or "Mini volume up" in self.query:
                pyautogui.press("volumeup")

            elif "volume down" in self.query or "Mini volume down" in self.query:
                pyautogui.press("volumedown")

            elif "volume mute" in self.query or "Mini volume mute" in self.query or "mute" in self.query:
                pyautogui.press("volumemute")

            # -------------- about AI --------------------- #

            elif "when is your birthday" in self.query:
                speak("My birthday is on August 3rd night 3:00 AM")

            # -------------- About Owner --------------------- #

            elif "when is my birthday" in self.query or "when is your owner's birthday" in self.query or "when is your owner birthday" in self.query:
                speak("Sir your birthday is on August 2nd, at night 3:00 AM")

            # -------------- Youtube --------------------- #

            elif "play naruto music" in self.query:
                kit.playonyt("https://www.youtube.com/watch?v=gKwIeqNq4ls&list=WL&index=17")

            elif "play boruto sad music" in self.query:
                kit.playonyt("https://www.youtube.com/watch?v=9a0fLJV-FpQ&list=WL&index=13")

            elif "open youtube" in self.query:
                webbrowser.open("www.youtube.com")
                speak("opening youtube")

            # -------------- google --------------------- #

            elif "search on google" in self.query:
                speak("sir, what should i search on google")
                cm = self.takecommand
                webbrowser.open(f"{cm}")

            elif "open google" in self.query:
                webbrowser.open("www.google.com")
                speak("opening google")

            # -------------- Mega mod --------------------- #

            elif "activate how to do mod" in self.query:
                speak("How to do mod is activated, tell me what you want to know")
                how = self.takecommand
                max_results = 1
                how_to = search_wikihow(how, max_results)
                assert len(how_to) == 1
                how_to[0].print()
                speak(how_to[0].summary)

            # -------------- normal + exit system --------------------- #
            elif 'goodbye' in self.query or 'see you mini' in self.query or 'mini down' in self.query or 'mini shutdown' in self.query or 'bye mini' in self.query or 'keep quiet' in self.query:
                speak("Do You want me to shutdown")
                self.query = self.takecommand
                if 'no' in self.query or 'cancel' in self.query:
                    speak("Process cancelled")
                if 'yes' in self.query or 'yep' in self.query or 'shutdown' in self.query:
                    hour = int(datetime.datetime.now().hour)
                    if hour >= 0 and hour < 18:
                        speak("Have a Nice day sir!")
                        exit()
                    elif hour >= 18 and hour < 24:
                        speak("Ok, good Night sir")
                        exit()

            elif "go to sleep" in self.query or "mini you can sleep now" in self.query:
                # speak("Okay sir going to sleep, I will there just call me if you need")
                break

            elif "go to offline" in self.query or "exit" in self.query:
                speak("Have a good day sir")
                sys.exit()

            # speak("sir do you want me to do something else")


startExecution = MainThread()


class Main(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_jarvisUi()
        self.ui.setupUi(self)
        self.ui.pushButton.clicked.connect(self.startTask)
        self.ui.pushButton_2.clicked.connect(self.close)

    def startTask(self):
        self.ui.movie = QtGui.QMovie("D:/CODE/py codes/pycharm projects/mini/images/black.png")
        self.ui.label.setMovie(self.ui.movie)
        self.ui.movie.start()

        self.ui.movie = QtGui.QMovie("images/intial.gif")
        self.ui.label_2.setMovie(self.ui.movie)
        self.ui.movie.start()

        self.ui.movie = QtGui.QMovie("images/start.gif")
        self.ui.label_3.setMovie(self.ui.movie)
        self.ui.movie.start()

        self.ui.movie = QtGui.QMovie("images/7215336eb5f63cb507d59dd5429be565.gif")
        self.ui.label_4.setMovie(self.ui.movie)
        self.ui.movie.start()

        timer = QTimer(self)
        timer.timeout.connect(self.showTime)
        timer.start(1000)
        startExecution.start()

    def showTime(self):
        current_time = QTime.currentTime()
        current_date = QDate.currentDate()
        label_time = current_time.toString('hh:mm:ss')
        label_date = current_date.toString(Qt.ISODate)
        self.ui.textBrowser.setText(label_date)
        self.ui.textBrowser_2.setText(label_time)


app = QApplication(sys.argv)
jarvis = Main()
jarvis.show()
sys.exit(app.exec_())
